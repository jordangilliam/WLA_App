import { NextRequest, NextResponse } from "next/server";
import { getServerSession } from "next-auth";
import { authOptions } from "@/app/api/auth/[...nextauth]/route";
import { gdEnsureFolder, gdUploadString, msGraph, odEnsureChildFolder, odUploadString } from "@/app/api/_lib/storage";

export async function POST(req: NextRequest){
  const session = await getServerSession(authOptions);
  if (!session) return NextResponse.json({ ok:false, error:'Not authenticated' }, { status: 401 });
  const gtok = (session as any).access_token as string | undefined;
  const mtok = (session as any).ms_access_token as string | undefined;

  const { track, entries } = await req.json(); // entries: [{student,email,activity,date,hours,supervisor,notes,artifacts:[{name,url}]}]
  const dateStr = new Date().toISOString().slice(0,10);

  const out:any = { ok:true, uploaded: [], google:null, onedrive:null };
  let gDay = null as string | null;
  let oDay = null as string | null;

  if (gtok){
    const root = await gdEnsureFolder("WLA", null, gtok);
    const admin = await gdEnsureFolder("Admin", root, gtok);
    const ver = await gdEnsureFolder("Outreach", admin, gtok);
    const t = await gdEnsureFolder("Verified", ver, gtok);
    const trackF = await gdEnsureFolder(track || "General", t, gtok);
    gDay = await gdEnsureFolder(dateStr, trackF, gtok);
    out.google = { folderId: gDay };
  }
  if (mtok){
    const root = await msGraph(`/me/drive/root`, { method: "GET" }, mtok);
    const rootId = root.id as string;
    const wla = await odEnsureChildFolder(rootId, "WLA", mtok);
    const admin = await odEnsureChildFolder(wla, "Admin", mtok);
    const ver = await odEnsureChildFolder(admin, "Outreach", mtok);
    const t = await odEnsureChildFolder(ver, "Verified", mtok);
    const trackF = await odEnsureChildFolder(t, track || "General", mtok);
    oDay = await odEnsureChildFolder(trackF, dateStr, mtok);
    out.onedrive = { folderId: oDay };
  }

  for(const e of (entries||[])){
    const html = `<!doctype html><html><body>
      <h1>Outreach Verification</h1>
      <p><strong>Student:</strong> ${e.student || ''} (${e.email || ''})</p>
      <p><strong>Activity:</strong> ${e.activity || ''}</p>
      <p><strong>Date:</strong> ${e.date || ''} • <strong>Hours:</strong> ${e.hours || ''}</p>
      <p><strong>Supervisor:</strong> ${e.supervisor || ''}</p>
      <p><strong>Notes:</strong> ${e.notes || ''}</p>
      ${(e.artifacts||[]).length ? `<h3>Artifacts</h3><ul>${(e.artifacts||[]).map((a:any)=>`<li><a href="${a.url}">${a.name || a.url}</a></li>`).join('')}</ul>`:''}
      <p style="color:#666;font-size:12px">Generated by WLA app — print to PDF for grant packets.</p>
    </body></html>`;
    const name = `outreach-${(e.email||'student').replace(/[^a-zA-Z0-9._-]/g,'_')}-${Date.now()}.html`;
    if (gDay && gtok) await gdUploadString(name, "text/html", html, gDay, gtok);
    if (oDay && mtok) await odUploadString(oDay, name, "text/html", html, mtok);
    out.uploaded.push({ name });
  }

  return NextResponse.json(out);
}
